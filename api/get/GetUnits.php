<?php
/**
 * @version 2.0
 * @author  ΤΕΙ Αθήνας
 * @package GET
 */

header("Content-Type: text/html; charset=utf-8");

/** 
 * **Μονάδες**
 * 
 * Η συνάρτηση αυτή επιστρέφει Μονάδες σύμφωνα με τις παραμέτρους που έγινε η κλήση.
 * <br>Η κλήση μπορεί να γίνει μέσω της παρακάτω διεύθυνσης με τη μέθοδο **GET** και route_api_name = **units** :
 * <br>https://mm.sch.gr/api/units
 *
 *
 * ***Ορισμός Τύπου και Πεδίου Ταξινόμησης Αποτελεσμάτων***
 * * Μέσω των παραμέτρων Πεδίο Ταξινόμησης (<a href="#$orderby">$orderby</a>) και Τύπος Ταξινόμησης (<a href="#$ordertype">$ordertype</a>) μπορεί να καθοριστεί το πεδίο και η σειρά ταξινόμησης.
 * * Προκαθορισμένη τιμή πεδίου ταξινόμησης είναι η αύξουσα σειρά **ASC**.
 * * Προκαθορισμένη τιμή τύπου ταξινόμησης είναι το **Όνομα Μονάδας**.  
 * 
 * ***Ορισμός Τύπου Εξαγωγής Δεδομένων***
 * * Μέσω του παραμέτρου Τύπος Εξαγωγής Δεδομένων (<a href="#$export">$export</a>) μπορεί να καθοριστεί ο τύπος εξαγωγής δεδομένων.
 * * Προκαθορισμένη τιμή Τύπου Εξαγωγής Δεδομένων είναι **JSON**.
 * * Όταν ο Τύπος Επιστροφής Εξαγωγής έχει τιμή XLSX ή CSV τότε η τιμή του pagesize αυτόματα από το σύστημα είναι 1000 και δεν μπορεί να αλλάξει.
 * * Σε κάθε περιπτωση που η τιμή του count είναι 1000 για την επιστροφή όλων δεδομένων, πρέπει να υλοποιηθεί κληση του ιδίου api request με
 *  αυξημένη κατα 1 την τιμή του page καθε φορά. Επίσης είναι διακριτό το μέγεθος της σελιδοποίησης από τις τιμές του pagination.
 *
 * ***Ορισμός Αριθμού Σελίδας και Εγγραφών/Σελίδα της Επιστροφής Αποτελεσμάτων***
 * * Μέσω των παραμέτρων Αριθμός Σελίδας (<a href="#$page">$page</a>) και Αριθμός Εγγραφών/Σελίδα (<a href="#$pagesize">$pagesize</a>) μπορεί να καθοριστεί ο αριθμός Σελίδας και Εγγραφών/Σελίδα της επιστροφής αποτελεσμάτων.
 * * Ο προκαθορισμένος αριθμός Εγγραφών/Σελίδα που επιστρέφονται ανά κλήση είναι **200**. 
 * * Ο προκαθορισμένος αριθμός Σελίδας που επιστρέφεται ανά κλήση είναι **1**. 
 * 
 * ***Ορισμός Τύπου Αναζήτησης Αποτελεσμάτων***
 * * Μέσω των παραμέτρων Τύπου Αναζήτησης (<a href="#$searchtype">$searchtype</a>) μπορεί να καθοριστεί μπορεί να καθοριστεί ο τρόπος με τον οποίο θα αναζητηθεί η τιμή της παραμέτρου στο DNS της Μονάδας.
 * * Ισχύει για όσες παραμέτρους το υποστηρίζουν το συνδυασμό με την παράμετρο searchtype.
 * * Προκαθορισμένη τιμή τύπου αναζήτησης είναι **CONTAINALL**.
 * 
 * ***Πίνακας Παραμέτρων***
 * * Στον Πίνακα Παραμέτρων <a href="#parameters">Parameters summary</a> εμφανίζονται όλοι οι παράμετροι με τους οποίους μπορεί να γίνει η κλήση της συνάρτησης.
 * * Όλοι οι παράμετροι είναι προαιρετικοί εκτός από αυτές που έχουν χαρακτηριστεί ως υποχρεωτικοί.
 * * Οι παράμετροι μπορούν να χρησιμοποιηθούν με οποιαδήποτε σειρά.
 * * Οι παράμετροι οι οποίοι έχουν το χαρακτηριστικό (Συνδυάζεται με την παράμετρο searchtype) σημαίνει ότι η συγκεκριμένη παράμετρος συνδυάζεται με την παράμετρο searchtype.
 * * Οι παράμετροι μπορούν να πάρουν τιμή "NULL" για να αναζητήσουν τις κενές εγγραφές στα αντίστοιχα πεδία
 *
 * ***Πίνακας Αποτελεσμάτων***
 * * Στον Πίνακα Αποτελεσμάτων <a href="#returns">Return value summary</a> εμφανίζονται οι μεταβλητές που επιστρέφει η συνάρτηση.
 * * Όλες οι μεταβλητές επιστρέφονται σε <a href="#model">JSON objects</a>.
 * * Η μεταβλητή <a href="#data">data</a> είναι ο πίνακας με τα δεδομένα.
 * * Η μεταβλητή status καθορίζει αν η εκτέλεση της συνάρτησης ήταν επιτυχής (κωδικός 200) ή προέκυψε κάποιο σφάλμα.
 * 
 * ***Πίνακας Σφαλμάτων***
 * * Στον Πίνακα Σφαλμάτων <a href="#throws">Thrown exceptions summary</a> εμφανίζονται τα Μηνύματα Σφαλμάτων που μπορεί να προκύψουν κατά την κλήση της συνάρτησης.
 * * Οι περιγραφές των Σφαλμάτων καθώς και οι Κωδικοί τους είναι διαθέσιμες μέσω του πίνακα Μηνύματα Σφαλμάτων ({@see ExceptionMessages}) και Κωδικοί Σφαλμάτων ({@see ExceptionCodes}) αντίστοιχα.
 * 
 * ***Παραδείγματα Κλήσης***
 * * Υπάρχουν διαθέσιμα παραδείγματα κλήσης της συνάρτησης με διάφορους τρόπους ({@see ApiRequestExamples}).
 * 
 * ***Μηνύματα Authentication/Authorization***
 * * Υπάρχουν αναλυτικές πληροφορίες για τα μηνύματα Authentication/Authorization ({@see AuthMessages}).
 * 
 * ***Μηνύματα Προκαθορισμένων Παραμέτρων***
 * * Υπάρχουν αναλυτικές πληροφορίες για τα μηνύματα Προκαθορισμένων Παραμέτρων ({@see StandarParamsMessages}).
 *
  * ***Δεδομένα Επιστροφής***
 * <br><a id="model"></a>Παρακάτω εμφανίζονται τα αποτελέσματα σε μορφή JSON :
 * <code>
 * {
 *  "data": [{}],
 *  "controller": "GetUnits",
 *  "function": "units",
 *  "method": "GET",
 *  "total": ``,
 *  "count": ``,
 *  "pagination": { "page": 1, "maxPage": 1, "pagesize": 200},
 *  "status": 200,
 *  "message": "[GET][units]:success"
 * }
 * </code>
 *
 * ***Πίνακας Δεδομένων***
 * <br><a id="data"></a>Παρακάτω εμφανίζεται ένα δείγμα από τον πίνακα data με τα αποτελέσματα σε μορφή JSON :
 * <code>
 * {"data": [{
 *              "mm_id": ``,
 *              "registry_no": ``,
 *              "name": ``,
 *              "special_name": ``,
 *              "source_id": ``,
 *              "source": ``,
 *              "category_id": ``,
 *              "category": ``,
 *              "state_id": ``,
 *              "state": ``,
 *              "street_address": ``,
 *              "postal_code": ``,
 *              "fax_number": ``,
 *              "phone_number": ``,
 *              "email": ``,
 *              "tax_number": ``,
 *              "region_edu_admin_id": ``,
 *              "region_edu_admin": ``,
 *              "edu_admin_id": ``,
 *              "edu_admin": ``,
 *              "transfer_area_id": ``,
 *              "transfer_area": ``,
 *              "prefecture_id": ``,
 *              "prefecture": ``,
 *              "municipality_id": ``,
 *              "municipality": ``,
 *              "municipality_community_id": ``,
 *              "municipality_community": ``,
 *              "education_level_id": ``,
 *              "education_level": ``,
 *              "unit_type_id": ``,
 *              "unit_type": ``,
 *              "orientation_type_id": ``,
 *              "orientation_type": ``,
 *              "operation_shift_id": ``,
 *              "operation_shift": ``,
 *              "legal_character_id": ``,
 *              "legal_character": ``,
 *              "implementation_entity_id": ``,
 *              "implementation_entity": ``,
 *              "implementation_entity_initials": ``,
 *              "tax_office_id": ``,
 *              "tax_office": ``,
 *              "special_type_id": ``,
 *              "special_type": ``,
 *              "latitude": ``,
 *              "longitude": ``,
 *              "country": ``,
 *              "pointsCategory: ``,
 *              "positioning": ``,
 *              "creation_fek": ``,
 *              "inaccessible": ``,
 *              "studentsSum": ``,
 *              "last_sync": ``,
 *              "last_update": ``,
 *              "comments": ``,
 *              "version": ``,
 *              "host_relations": [{
 *                                  "relation_id": ``,
 *                                  "guest_mm_id": ``,
 *                                  "guest_registry_no": ``,
 *                                  "guest_name": ``,
 *                                  "guest_special_name": ``,
 *                                  "relation_state": ``,
 *                                  "true_date": ``,
 *                                  "true_fek": ``,
 *                                  "false_date": ``,
 *                                  "false_fek": ``,
 *                                  "relation_type_id": ``,
 *                                  "relation_type": ``
 *                                }],
 *              "guest_relations": [{
 *                                  "relation_id": ``,
 *                                  "host_mm_id": ``,
 *                                  "host_registry_no": ``,
 *                                  "host_name": ``,
 *                                  "host_special_name": ``,
 *                                  "relation_state": ``,
 *                                  "true_date": ``,
 *                                  "true_fek": ``,
 *                                  "false_date": ``,
 *                                  "false_fek": ``,
 *                                  "relation_type_id": ``,
 *                                  "relation_type": ``
 *                                 }],
 *              "workers": [{
 *                          "unit_worker_id": ``,
 *                          "worker_id": ``,
 *                          "registry_no": ``,
 *                          "tax_number": ``,
 *                          "lastname": ``,
 *                          "firstname": ``,
 *                          "fathername": ``,
 *                          "fullname": ``,
 *                          "sex": ``,
 *                          "worker_specialization_id": ``,
 *                          "worker_specialization": ``,
 *                          "worker_position_id": ``,
 *                          "worker_position": ``,
 *                          "worker_source_id": ``,
 *                          "worker_source": ``
 *                         }],
 *              "unit_dns": [{
 *                            "unit_dns_id": ``,
 *                            "unit_dns": ``,
 *                            "unit_ext_dns": ``
 *                          }]
 *      }]
 *  }
 * </code> 
 * 
 *
 * @param integer $mm_id Κωδικός ΜΜ Μονάδας
 * <br>
 * <br>Ο Κωδικός ΜΜ της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : integer|array[integer]
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ΜΜ της Μονάδας
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>array[integer]
 *       <br>Σύνολο από Αριθμητικές τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 *
 * @param mixed $registry_no Κωδικός ΥΠΕΠΘ
 * <br>
 * <br>O Κωδικός ΥΠΕΠΘ της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{string|null|array[string|null]}
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Κωδικό ΥΠΕΠΘ της Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $source Πρωτογενής Πηγή
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID της Πρωτογενής Πηγής της Μονάδας
 * <br>Λεξικό : {@see GetSources}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID της Πρωτογενής Πηγής
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα της Πρωτογενής Πηγής
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param string $name Ονομασία
 * <br>
 * <br>Η Ονομασία της Μονάδας
 * <br>Συνδυάζεται με την παράμετρο searchtype
 * <br>Λίστα Τύπων Αναζήτησης : {@see SearchEnumTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string|array[string]
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με την Ονομασία της Μονάδας
 *       <br>Αν η παράμετρος Τύπος Αναζήτησης δεν έχει τιμή τότε η αναζήτηση στον Όνομα γίνεται με τον Tύπο {@see SearchEnumTypes::ContainAll}
 *    </li>
 *    <li>array[string]
 *       <br>Σύνολο από Αλφαριθμητικές τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param string $special_name Προσωνύμιο
 * <br>
 * <br>Το Προσωνύμιο της Μονάδας
 * <br>Συνδυάζεται με την παράμετρο searchtype
 * <br>Λίστα Τύπων Αναζήτησης : {@see SearchEnumTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string|array[string]
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Προσωνύμιο της Μονάδας
 *       <br>Αν η παράμετρος Τύπος Αναζήτησης δεν έχει τιμή τότε η αναζήτηση στον Προσωνύμιο γίνεται με τον Tύπο {@see SearchEnumTypes::ContainAll}
 *    </li>
 *    <li>array[string]
 *       <br>Σύνολο από Αλφαριθμητικές τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $state Λειτουργική Καταστάση
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID της Λειτουργικής Καταστάσης της Μονάδας 
 * <br>Λεξικό : {@see GetStates}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID της Λειτουργικής Καταστάσης
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα της Λειτουργικής Καταστάσης
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $region_edu_admin Περιφέρεια
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID της Περιφέρειας της Μονάδας 
 * <br>Λεξικό : {@see GetRegionEduAdmins}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID της Περιφέρειας
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα της Περιφέρειας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $edu_admin Διεύθυνση Εκπαίδευσης
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID της Διευθύνσης Εκπαίδευσης της Μονάδας 
 * <br>Λεξικό : {@see GetEduAdmins}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID της Διευθύνσης Εκπαίδευσης
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα της Διευθύνσης Εκπαίδευσης
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $implementation_entity Φορέας Υλοποίησης 
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID του Φορέα Υλοποίησης της Μονάδας 
 * <br>Λεξικό : {@see GetImplementationEntities}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID του Φορέα Υλοποίησης
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα του Φορέα Υλοποίησης
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
  * @param mixed $transfer_area Περιοχή Μετάθεσης 
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID της Περιοχής Μετάθεσης της Μονάδας 
 * <br>Λεξικό : {@see GetTransferAreas}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID της Περιοχής Μετάθεσης
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα της Περιοχής Μετάθεσης
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $prefecture Περιφερειακή Ενότητα
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID της Περιφερειακή Ενότητα της Μονάδας 
 * <br>Λεξικό : {@see GetPrefectures}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID της Περιφερειακής Ενότητα
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα της Περιφερειακής Ενότητα
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $municipality Δήμος ΟΤΑ 
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID του Δήμου ΟΤΑ της Μονάδας 
 * <br>Λεξικό : {@see GetMunicipalities}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID του Δήμου ΟΤΑ
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα του Δήμου ΟΤΑ
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $municipality_community Δημοτική Ενότητα
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID της Δημοτικής Ενότητας της Μονάδας 
 * <br>Λεξικό : {@see GetMunicipalityCommunities}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID της Δημοτικής Ενότητας
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα της Δημοτικής Ενότητας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $education_level Βαθμίδα Εκπαίδευσης
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID της Βαθμίδας Εκπαίδευσης της Μονάδας 
 * <br>Λεξικό : {@see GetEducationLevels}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID της Βαθμίδας Εκπαίδευσης
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα της Βαθμίδας Εκπαίδευσης
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param string $phone_number Τηλέφωνο Επικοινωνίας
 * <br>
 * <br>Το Τηλέφωνο Επικοινωνίας της Μονάδας
 * <br>Συνδυάζεται με την παράμετρο searchtype
 * <br>Λίστα Τύπων Αναζήτησης : {@see SearchEnumTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string|array[string]
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Τηλέφωνο Επικοινωνίας της Μονάδας
 *       <br>Αν η παράμετρος Τύπος Αναζήτησης δεν έχει τιμή τότε η αναζήτηση στον Προσωνύμιο γίνεται με τον Tύπο {@see SearchEnumTypes::ContainAll}
 *    </li>
 *    <li>array[string]
 *       <br>Σύνολο από Αλφαριθμητικές τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $email Ηλεκτρονική Αλληλογραφία
 * <br>
 * <br>Η Ηλεκτρονική Αλληλογραφία της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{string|null|array[string|null]}
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με την Ηλεκτρονική Αλληλογραφία της Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $fax_number Αριθμός Τηλεομοιοτυπίας (FAX) 
 * <br>
 * <br>O Αριθμός Τηλεομοιοτυπίας (FAX) της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{string|null|array[string|null]}
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με τον Αριθμό Τηλεομοιοτυπίας (FAX) της Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param string $street_address Διεύθυνση (Οδός,Αριθμός) 
 * <br>
 * <br>Η Διεύθυνση (Οδός,Αριθμός) της Μονάδας
 * <br>Συνδυάζεται με την παράμετρο searchtype
 * <br>Λίστα Τύπων Αναζήτησης : {@see SearchEnumTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string|array[string]
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με την Διεύθυνση (Οδός,Αριθμός) της Μονάδας
 *       <br>Αν η παράμετρος Τύπος Αναζήτησης δεν έχει τιμή τότε η αναζήτηση στον Προσωνύμιο γίνεται με τον Tύπο {@see SearchEnumTypes::ContainAll}
 *    </li>
 *    <li>array[string]
 *       <br>Σύνολο από Αλφαριθμητικές τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $postal_code Ταχυδρομικός Κώδικας
 * <br>
 * <br>O Ταχυδρομικός Κώδικας της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{string|null|array[string|null]}
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με τον Ταχυδρομικό Κώδικα της Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $tax_number Αριθμός Φορολογικού Μητρώου (Α.Φ.Μ.)
 * <br>
 * <br>O Αριθμός Φορολογικού Μητρώου (Α.Φ.Μ.) της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{string|null|array[string|null]}
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με τον Αριθμό Φορολογικού Μητρώου (Α.Φ.Μ.) της Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $tax_office Δ.Ο.Υ (Εφορία)
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID της Δ.Ο.Υ (Εφορία) της Μονάδας 
 * <br>Λεξικό : {@see GetTaxOffices}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID της Δ.Ο.Υ (Εφορία)
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα της Δ.Ο.Υ (Εφορία)
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $area_team_number Ομάδα Σχολείων
 * <br>
 * <br>Η Ομάδα Σχολείων της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{string|null|array[string|null]}
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με την Ομάδα Σχολείων της Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $category Κατηγορία
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID της Κατηγορίας της Μονάδας 
 * <br>Λεξικό : {@see GetCategories}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID της Κατηγορίας
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα της Κατηγορίας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $unit_type Τύπος Μονάδας
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID του Τύπου Μονάδας 
 * <br>Λεξικό : {@see GetUnitTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID του Τύπου Μονάδας
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα του Τύπου Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $operation_shift Ωράριο Λειτουργίας
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID του Ωράριου Λειτουργίας της Μονάδας 
 * <br>Λεξικό : {@see GetOperationShifts}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID του Ωράριου Λειτουργίας
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα του Ωράριου Λειτουργίας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
  * @param mixed $legal_character Νομικός Χαρακτήρας
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID του Νομικού Χαρακτήρα της Μονάδας 
 * <br>Λεξικό : {@see GetLegalCharacters}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID του Νομικού Χαρακτήρα
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα του Νομικού Χαρακτήρα
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $orientation_type Προσανατολισμός
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID του Προσανατολισμού της Μονάδας 
 * <br>Λεξικό : {@see GetOrientationTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID του Προσανατολισμού
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα του Προσανατολισμού
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $special_type Ειδικός Χαρακτηρισμός
 * <br>
 * <br>Το Όνομα ή ο Κωδικός ID του Ειδικού Χαρακτηρισμού της Μονάδας 
 * <br>Λεξικό : {@see GetSpecialTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{integer|string|null|array[integer|string|null]}
 * <ul>
 *    <li>integer
 *       <br>Αριθμητική : Η αναζήτηση γίνεται με τον Κωδικό ID του Ειδικού Χαρακτηρισμού
 *       <br>Η αναζήτηση στον Κωδικό γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Όνομα του Ειδικού Χαρακτηρισμού
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $levels_count Πλήθος Τάξεων
 * <br>
 * <br>Το Πλήθος των Τάξεων της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{string|null|array[string|null]}
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Πλήθος των Τάξεων της Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 *
 * @param mixed $groups_count Πλήθος Τμημάτων
 * <br>
 * <br>Το Πλήθος των Τμημάτων της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{string|null|array[string|null]}
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Πλήθος των Τμημάτων της Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $latitude Γεωγραφικό Πλάτος
 * <br>
 * <br>Το Γεωγραφικό Πλάτος της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{string|null|array[string|null]}
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Γεωγραφικό Πλάτος της Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $longitude Γεωγραφικό Μήκος
 * <br>
 * <br>Το Γεωγραφικό Μήκος της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{string|null|array[string|null]}
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Γεωγραφικό Μήκος της Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param mixed $positioning Κτηριακή Θέση 
 * <br>
 * <br>Η Κτηριακή Θέση της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : mixed{string|null|array[string|null]}
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με την Κτηριακή Θέση της Μονάδας
 *       <br>Η αναζήτηση στον Όνομα γίνεται με τον Τύπο {@see SearchEnumTypes::Exact}
 *    </li>
 *    <li>null
 *       <br>Null : Η αναζήτηση γίνεται με την επιλογή κενή τιμής
 *    </li>
 *    <li>array[integer|string|null]
 *       <br>Σύνολο από Αριθμητικές ή Αλφαριθμητικές ή Null τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param string $creation_fek Φ.Ε.Κ. (Δημιουργίας) 
 * <br>
 * <br>Το Φ.Ε.Κ. (Δημιουργίας) της Μονάδας
 * <br>Συνδυάζεται με την παράμετρο searchtype
 * <br>Λίστα Τύπων Αναζήτησης : {@see SearchEnumTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string|array[string]
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με το Φ.Ε.Κ. (Δημιουργίας) της Μονάδας
 *       <br>Αν η παράμετρος Τύπος Αναζήτησης δεν έχει τιμή τότε η αναζήτηση στον Προσωνύμιο γίνεται με τον Tύπο {@see SearchEnumTypes::ContainAll}
 *    </li>
 *    <li>array[string]
 *       <br>Σύνολο από Αλφαριθμητικές τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 *
 * @param string $inaccessible Δυσπρόσιτο
 * <br>
 * <br>Ορίζει αν η Μονάδα είναι δυσπρόσιτη
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : int
 *
 * @param string $studentsSum Σύνολο μαθητών της Μονάδας
 * <br>
 * <br>Σύνολο μαθητών της Μονάδας
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : int
 *
 *
 * @param string $last_update Ημερομηνία Τελευταίας Ενημέρωσης 
 * <br>
 * <br>Η Ημερομηνία Τελευταίας Ενημέρωσης της Μονάδας
 * <br>Συνδυάζεται με την παράμετρο searchtype
 * <br>Λίστα Τύπων Αναζήτησης : {@see SearchEnumTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string|array[string]
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με την Ημερομηνία Τελευταίας Ενημέρωσης της Μονάδας
 *       <br>Αν η παράμετρος Τύπος Αναζήτησης δεν έχει τιμή τότε η αναζήτηση στον Προσωνύμιο γίνεται με τον Tύπο {@see SearchEnumTypes::ContainAll}
 *    </li>
 *    <li>array[string]
 *       <br>Σύνολο από Αλφαριθμητικές τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param string $last_sync Ημερομηνία Τελευταίου Συγχρονισμού 
 * <br>
 * <br>Η Ημερομηνία Τελευταίου Συγχρονισμού της Μονάδας
 * <br>Συνδυάζεται με την παράμετρο searchtype
 * <br>Λίστα Τύπων Αναζήτησης : {@see SearchEnumTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string|array[string]
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με την Ημερομηνία Τελευταίου Συγχρονισμού της Μονάδας
 *       <br>Αν η παράμετρος Τύπος Αναζήτησης δεν έχει τιμή τότε η αναζήτηση στον Προσωνύμιο γίνεται με τον Tύπο {@see SearchEnumTypes::ContainAll}
 *    </li>
 *    <li>array[string]
 *       <br>Σύνολο από Αλφαριθμητικές τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * @param string $comments Παρατηρήσεις-Σχόλια
 * <br>
 * <br>Παρατηρήσεις-Σχόλια της Μονάδας
 * <br>Συνδυάζεται με την παράμετρο searchtype
 * <br>Λίστα Τύπων Αναζήτησης : {@see SearchEnumTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string|array[string]
 * <ul>
 *    <li>string
 *       <br>Αλφαριθμητική : Η αναζήτηση γίνεται με Παρατηρήσεις-Σχόλια της Μονάδας
 *       <br>Αν η παράμετρος Τύπος Αναζήτησης δεν έχει τιμή τότε η αναζήτηση στον Προσωνύμιο γίνεται με τον Tύπο {@see SearchEnumTypes::ContainAll}
 *    </li>
 *    <li>array[string]
 *       <br>Σύνολο από Αλφαριθμητικές τιμές διαχωρισμένες με κόμμα
 *       <br>Η αναζήτηση γίνεται με οποιαδήποτε από αυτές τις τιμές
 *    </li>
 * </ul>
 * 
 * 
 * @param integer $pagesize Αριθμός Εγγραφών/Σελίδα
 * <br>
 * <br>Ο αριθμός των εγγραφών που θα επιστρέψουν ανα σελίδα
 * <br>Η παράμετρος δεν είναι υποχρεωτική
 * <br>Αν η παράμετρος δεν έχει τιμή τότε θα επιστραφούν όλες οι προκαθορισμένες εγγραφές ({@see Parameters::DefaultPageSize})
 * <br>Λίστα Παραμέτρων Σελιδοποίησης : {@see Parameters}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : integer
 * <ul><li>integer<br>Αριθμητική : Η τιμή της παραμέτρου πρέπει να είναι μεγαλύτερη από 0</li></ul>
 *
 * @param integer $page Αριθμός Σελίδας
 * <br>
 * <br>Ο αριθμός της σελίδας με τις <a href="#$pagesize">$pagesize</a> εγγραφές που βρέθηκαν σύμφωμα με τις παραμέτρους
 * <br>Η παράμετρος δεν είναι υποχρεωτική
 * <br>Αν η παράμετρος δεν έχει τιμή τότε θα επιστραφεί η πρώτη σελίδα
 * <br>Λίστα Παραμέτρων Σελίδας : {@see Parameters}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : integer
 * <ul><li>integer<br>Αριθμητική : Η τιμή της παραμέτρου πρέπει να είναι μεγαλύτερη από 0</li></ul>
 *
 * @param string $orderby Πεδίο Ταξινόμησης
 * <br>
 * <br>Το όνομα του πεδίου με το οποίο γίνεται η ταξινόμηση των εγγραφών
 * <br>Η παράμετρος δεν είναι υποχρεωτική
 * <br>Αν η παράμετρος δεν έχει τιμή τότε η ταξινόμηση γίνεται με το **Όνομα Μονάδας**
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string
 * <ul><li>string<br>Αλφαριθμητική : Η τιμή της παραμέτρου μπορεί να είναι οποιοδήποτε όνομα πεδίου επιστρέφεται στον πίνακα data</li></ul>
 *
 * @param string $ordertype Τύπος Ταξινόμησης
 * <br>
 * <br>Ο τύπος ταξινόμησης με τον οποίο γίνεται η ταξινόμηση των εγγραφών
 * <br>Η παράμετρος δεν είναι υποχρεωτική
 * <br>Αν η παράμετρος δεν έχει τιμή τότε η ταξινόμηση γίνεται με Αύξουσα Σειρά ({@see OrderEnumTypes::ASC})
 * <br>Λίστα Τύπων Ταξινόμησης : {@see OrderEnumTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string
 * <ul><li>string<br>Αλφαριθμητική : Η τιμή της παραμέτρου μπορεί να είναι ένας από τους Tύπους {@see OrderEnumTypes}</li></ul>
 *
 * @param string $searchtype Τύπος Αναζήτησης
 * <br>
 * <br>Ο Τύπος Αναζήτησης με τον οποίο γίνεται η αναζήτηση στα πεδία 
 * <ul>
 * <li>Όνομασία Μονάδας (<a href="#$name">$name</a>)</li>
 * <li>Προσωνύμιο Μονάδας (<a href="#$special_name">$special_name</a>)</li>
 * <li>Τηλεφωνικός Αριθμός Μονάδας (<a href="#$phone_number">$phone_number</a>)</li>
 * <li>Διεύθυνση (Οδός,Αριθμός) Μονάδας (<a href="#$street_address">$street_address</a>)</li>
 * <li>Φ.Ε.Κ. (Δημιουργίας) Μονάδας (<a href="#$creation_fek">$creation_fek</a>)</li>
 * <li>Ημερομηνία Τελευταίας Ενημέρωσης (<a href="#$last_update">$last_update</a>)</li>
 * <li>Ημερομηνία Τελευταίου Συγχρονισμού (<a href="#$last_sync">$last_sync</a>)</li>
 * <li>Παρατηρήσεις-Σχόλια Μονάδας (<a href="#$comments">$comments</a>)</li>
 * </ul>
 * <br>Η παράμετρος δεν είναι υποχρεωτική
 * <br>Αν η παράμετρος δεν έχει τιμή τότε η αναζήτηση στα πεδία αυτά γίνεται με τον Τύπο {@see SearchEnumTypes::ContainAll}
 * <br>Λίστα Τύπων Αναζήτησης : {@see SearchEnumTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string
 * <ul><li>string<br>Αλφαριθμητική : Η τιμή της παραμέτρου μπορεί να είναι ένας από τους Tύπους {@see SearchEnumTypes}</li></ul>
 * 
 * @param string $export Τύπος Εξαγωγής Δεδομένων
 * <br>
 * <br>Ο Τύπος Εξαγωγής Δεδομένων με τον οποίο θα γίνει η εξαγωγή σε συγκεκριμένη μορφή τών δεδομένων
 * <br>Η παράμετρος δεν είναι υποχρεωτική
 * <br>Αν η παράμετρος δεν έχει τιμή τότε η εξαγωγή δεδομένων γίνεται με τον Τύπο {@see ExportDataEnumTypes::JSON}
 * <br>Λίστα Τύπων Εξαγωγής Δεδομένων : {@see ExportDataEnumTypes}
 * <br>Η τιμή της παραμέτρου μπορεί να είναι : string
 * <ul><li>string<br>Αλφαριθμητική : Η τιμή της παραμέτρου μπορεί να είναι ένας από τους Tύπους {@see ExportDataEnumTypes}</li></ul>
 *
 * 
 * @return Objects<JSON> Επιστρέφει τα παρακάτω JSON objects :
 * <br>
 * <br>array : <b>data</b> : Ο Πίνακας με τα δεδομένα
 *  <ul>
 * 
 *      <li>integer : <b>mm_id</b> : Ο Κωδικός ΜΜ</li>
 *      <li>string : <b>registry_no</b> : Ο Κωδικός ΥΠΕΠΘ της Μονάδας</li>
 *      <li>string : <b>name</b> : Το Όνομα της Μονάδας</li>
 *      <li>string : <b>special_name</b> : Το Προσωνύμιο της Μονάδας</li>
 *      <li>integer : <b>source_id</b> : Ο Κωδικός ID της Πρωτογενής Πηγής της Μονάδας</li>
 *      <li>string : <b>source</b> :Το Όνομα της Πρωτογενής Πηγής της Μονάδας</li>
 *      <li>integer : <b>category_id</b> : Ο Κωδικός ID της Κατηγορίας της Μονάδας</li>
 *      <li>string : <b>category</b> : Το Όνομα της Κατηγορίας της Μονάδας</li>
 *      <li>integer : <b>state_id</b> : Ο Κωδικός ID της Λειτουργικής Κατάστασης της Μονάδας</li>
 *      <li>string : <b>state</b> : Το Όνομα της Λειτουργικής Κατάστασης της Μονάδας</li>
 *      <li>string : <b>street_address</b> : Η Διεύθυνση (Οδός και Αριθμός) της Μονάδας</li>
 *      <li>string : <b>postal_code</b> : Ο Ταχυδρομικός Κώδικας της Μονάδας</li>
 *      <li>string : <b>fax_number</b> : Ο Αριθμός Τηλεομοιοτυπίας (φαξ) της Μονάδας</li>
 *      <li>string : <b>phone_number</b> : Το Τηλέφωνο Επικοινωνίας της Μονάδας</li>
 *      <li>string : <b>email</b> : Η Ηλεκτρονική Αλληλογραφία της Μονάδας</li>
 *      <li>string : <b>tax_number</b> : Ο Αριθμός Φορολογικού Μητρώου της Μονάδας</li> 
 *      <li>integer : <b>region_edu_admin_id</b> : Ο Κωδικός ID της Περιφέρειας της Μονάδας</li>
 *      <li>string : <b>region_edu_admin</b> : Το Όνομα της Περιφέρειας της Μονάδας</li>
 *      <li>integer : <b>edu_admin_id</b> : Ο Κωδικός ID της Διεύθυνσης Εκπαίδευσης της Μονάδας</li>
 *      <li>string : <b>edu_admin</b> : Το Όνομα της Διεύθυνσης Εκπαίδευσης της Μονάδας</li>
 *      <li>integer : <b>transfer_area_id</b> : Ο Κωδικός ID της Περιοχής Μετάθεσης της Μονάδας</li>
 *      <li>string : <b>transfer_area</b> : Το Όνομα της Περιοχής Μετάθεσης της Μονάδας</li>
 *      <li>integer : <b>prefecture_id</b> : Ο Κωδικός ID της Περιφερειακής Ενότητας της Μονάδας</li>
 *      <li>string : <b>prefecture</b> : Το Όνομα της Περιφερειακής Ενότητας της Μονάδας</li>
 *      <li>integer : <b>municipality_id</b> : Ο Κωδικός ID του Δήμου ΟΤΑ της Μονάδας</li>
 *      <li>string : <b>municipality</b> : Το Όνομα του Δήμου ΟΤΑ της Μονάδας</li>
 *      <li>integer : <b>municipality_community_id</b> : Ο Κωδικός ID της Δημοτικής Ενότητα της Μονάδας</li>
 *      <li>string : <b>municipality_community</b> : Το Όνομα της Δημοτικής Ενότητα της Μονάδας</li>
 *      <li>integer : <b>education_level_id</b> : Ο Κωδικός ID του Επιπέδου Εκπαίδευσης της μονάδας</li>
 *      <li>string : <b>education_level</b> : Το Όνομα του Επίπεδου Εκπαίδευσης της μονάδας</li>
 *      <li>integer : <b>unit_type_id</b> : Ο Κωδικός ID του Τύπου της Μονάδας</li>
 *      <li>string : <b>unit_type</b> : Το Όνομα του Τύπου της Μονάδας</li>
 *      <li>integer : <b>operation_shift_id</b> : Ο Κωδικός ID του Ωραρίου Λειτουργίας της Μονάδας</li>
 *      <li>string : <b>operation_shift</b> : Το Όνομα του Ωραρίου Λειτουργίας της Μονάδας</li>
 *      <li>integer : <b>legal_character_id</b> : Ο Κωδικός ID του Νομικου Χαρακτήρα της Μονάδας</li>
 *      <li>string : <b>legal_character</b> : Το Όνομα του Νομικού Χαρακτήρα της Μονάδας</li>
 *      <li>integer : <b>orientation_type_id</b> : Ο Κωδικός ID του Προσανατολισμού της Μονάδας</li>
 *      <li>string : <b>orientation_type</b> : Το Όνομα του Προσανατολισμός της Μονάδας</li>
 *      <li>integer : <b>implementation_entity_id</b> : Ο Κωδικός ID του Φορέα Υλοποίησης της Μονάδας</li>
 *      <li>string : <b>implementation_entity</b> : Το Όνομα του Φορέα Υλοποίησης της Μονάδας</li>
 *      <li>string : <b>implementation_entity_initials</b> : Τα αρχικά του Φορέα Υλοποίησης της Μονάδας</li>
 *      <li>integer : <b>tax_office_id</b> : Ο Κωδικός ID της Δ.Ο.Υ. της Μονάδας</li>
 *      <li>string : <b>tax_office</b> : Το Όνομα της Δ.Ο.Υ. της Μονάδας</li>
 *      <li>integer : <b>special_type_id</b> : Ο Κωδικός ID του Ειδικού Χαρακτηρισμού της Μονάδας</li>
 *      <li>string : <b>special_type</b> : Το Όνομα του Ειδικού Χαρακτηρισμού της Μονάδας</li> 
 *      <li>string : <b>latitude</b> : Το Γεωγραφικό Πλάτος της Μονάδας</li>
 *      <li>string : <b>longitude</b> : Το Γεωγραφικό Μήκος της Μονάδας</li>
 *      <li>string : <b>positioning</b> : Η Κτηριακή Θέση της Μονάδας</li>
 *      <li>string : <b>creation_fek</b> : Το Φ.Ε.Κ. (Δημιουργίας) της Μονάδας</li>
 *      <li>datetime : <b>last_update</b> : Η Ημερομηνία Τελευταίας Ενημέρωσης της Μονάδας</li>
 *      <li>datetime : <b>last_sync</b> : Η Ημερομηνία Τελευταίου Συγχρονισμού της Μονάδας</li>
 *      <li>string : <b>comments</b> : Παρατηρήσεις - Σχόλια της Μονάδας<br><br></li>
 *      <li>string : <b>version</b> : H version συγχρονισμού των δεδομένων της Μονάδας<br><br></li>
 *  
 *      <li>array : <b>host_relations</b> : Πίνακας Host Συσχετίσεων Μονάδων (Λεξικό : {@see GetRelations})
 *          <ul>
 *              <li>integer : <b>relation_id</b> : Ο Κωδικός ID της Συσχέτισης</li>
 *              <li>integer : <b>guest_mm_id</b> : Ο Κωδικός ΜΜ της Guest Μονάδας</li>
 *              <li>string : <b>guest_registry_no</b> : Ο Κωδικός ΥΠΕΠΘ της Guest Μονάδας</li>
 *              <li>string : <b>guest_name</b> : Το Όνομα της Guest Μονάδας</li>
 *              <li>string : <b>guest_special_name</b> : Το Προσωνύμιο της Guest Μονάδας</li>
 *              <li>boolean : <b>relation_state</b> : Καθορίζει αν η Συσχέτιση είναι Ενεργή</li>
 *              <li>date : <b>true_date</b> : Η Ημερομηνία που η Συσχέτιση έγινε Ενεργή</li>
 *              <li>string : <b>true_fek</b> : Το ΦΕΚ όταν η Συσχέτιση έγινε Ενεργή</li>
 *              <li>date : <b>false_date</b> : Η Ημερομηνία που η Συσχέτιση έγινε Ανενεργή</li>
 *              <li>string : <b>false_fek</b> : Το ΦΕΚ όταν η Συσχέτιση έγινε Ανενεργή</li>
 *              <li>integer : <b>relation_type_id</b> : Ο Κωδικός ID του Τύπου Συσχέτισης των Μονάδων</li>
 *              <li>string : <b>relation_type</b> : Το Όνομα του Τύπου Συσχέτισης των Μονάδων</li>
 *          </ul>
 *          <br>
 *      </li>
 * 
 *      <li>array : <b>guest_relations</b> : Πίνακας Guest Συσχετίσεων Μονάδων (Λεξικό : {@see GetRelations})
 *          <ul>
 *              <li>integer : <b>relation_id</b> : Ο Κωδικός ID της Συσχέτισης</li>
 *              <li>integer : <b>host_mm_id</b> : Ο Κωδικός ΜΜ της Host Μονάδας</li>
 *              <li>string : <b>host_registry_no</b> : Ο Κωδικός ΥΠΕΠΘ της Host Μονάδας</li>
 *              <li>string : <b>host_name</b> : Το Όνομα της Host Μονάδας</li>
 *              <li>string : <b>host_special_name</b> : Το Προσωνύμιο της Host Μονάδας</li>
 *              <li>boolean : <b>relation_state</b> : Καθορίζει αν η Συσχέτιση είναι Ενεργή</li>
 *              <li>date : <b>true_date</b> : Η Ημερομηνία που η Συσχέτιση έγινε Ενεργή</li>
 *              <li>string : <b>true_fek</b> : Το ΦΕΚ όταν η Συσχέτιση έγινε Ενεργή</li>
 *              <li>date : <b>false_date</b> : Η Ημερομηνία που η Συσχέτιση έγινε Ανενεργή</li>
 *              <li>string : <b>false_fek</b> : Το ΦΕΚ όταν η Συσχέτιση έγινε Ανενεργή</li>
 *              <li>integer : <b>relation_type_id</b> : Ο Κωδικός ID του Τύπου Συσχέτισης των Μονάδων</li>
 *              <li>string : <b>relation_type</b> : Το Όνομα του Τύπου Συσχέτισης των Μονάδων</li>
 *          </ul>
 *          <br>
 *      </li>
 * 
 *      <li>array : <b>workers</b> : Πίνακας Συσχετίσεων Μονάδων με Εργαζομένους (Λεξικό : {@see GetUnitWorkers})
 *          <ul>
 *              <li>integer : <b>unit_worker_id</b> : Ο Κωδικός ID της Συσχετίσης Μονάδας με Εργαζόμενο</li>
 *              <li>integer : <b>worker_id</b> : Ο Κωδικός ID του Εργαζόμενου</li>
 *              <li>string : <b>registry_no</b> : Ο Αριθμός Μητρώου του Εργαζόμενου</li>
 *              <li>string : <b>tax_number</b> : Ο Αριθμός Φορολογικού Μητρώου του Εργαζόμενου</li>
 *              <li>string : <b>lastname</b> : Το Επώνυμο του Εργαζόμενου</li>
 *              <li>string : <b>firstname</b> : Το Όνομα του Εργαζόμενου</li>
 *              <li>string : <b>fathername</b> : Το Πατρώνυμο του Εργαζόμενου</li>
 *              <li>string : <b>fullname</b> : Το Ονοματεπώνυμο του Εργαζόμενου</li>
 *              <li>string : <b>sex</b> : Το Φύλο του Εργαζόμενου</li>
 *              <li>string : <b>worker_specialization_id</b> : Ο Κωδικός ID της Ειδικότητας του Εργαζομένου</li> 
 *              <li>string : <b>worker_specialization</b> : Το Όνομα της Ειδικότητας του Εργαζομένου</li>
 *              <li>string : <b>worker_position_id</b> : Ο Κωδικός ID της Θέσης Εργασίας του Εργαζομένου</li>
 *              <li>string : <b>worker_position</b> : Το Όνομα της Θέσης Εργασίας του Εργαζομένου</li>
 *              <li>integer : <b>worker_source_id</b> : Ο Κωδικός ID της Πρωτογενής Πηγής του Εργαζομένου</li>
 *              <li>string : <b>worker_source</b> : Το Όνομα της Πρωτογενής Πηγή του Εργαζομένου</li>
 *          </ul>
 *          <br>
 *      </li>
 * 
 *      <li>array : <b>unit_dns</b> : Πίνακας DNS Στοιχείων Μονάδας (Λεξικό : {@see GetUnitDns})
 *          <ul>
 *              <li>integer : <b>unit_dns_id</b> : Ο Κωδικός ID του DNS Μονάδας</li>
 *              <li>string : <b>unit_dns</b> : Το Όνομα του DNS Μονάδας</li>
 *              <li>string : <b>unit_ext_dns</b> : Το Όνομα του ExtDNS Μονάδας</li>
 *          </ul>
 *          <br>
 *      </li>
 * 
 *  </ul>
 * <br>string : <b>controller</b> : Ο controller που χρησιμοποιείται
 * <br>string : <b>function</b> : Η συνάρτηση που υλοποιείται από το σύστημα
 * <br>string : <b>method</b> : Η μέθοδος κλήσης της συνάρτησης
 * <br>integer : <b>total</b> : Το πλήθος των εγγραφών χωρίς τις παραμέτρους σελιδοποίησης
 * <br>integer : <b>count</b> : Το πλήθος των εγγραφών της κλήσης σύμφωνα με τις παραμέτρους σελιδοποίησης
 * <br>array : <b>pagination</b> : Οι παράμετροι σελιδοποίησης των εγγραφών της κλήσης
 *  <ul>
 *      <li>integer : <b>page</b> : Ο αριθμός της σελίδας των αποτελεσμάτων</li>
 *      <li>integer : <b>maxPage</b> : Ο μέγιστος αριθμός της σελίδας των αποτελεσμάτων</li>
 *      <li>integer : <b>pagesize</b> :  Ο αριθμός των εγγραφών προς επιστροφή</li>
 *  </ul>
 * <br>integer : <b>status</b> : Ο Κωδικός του αποτελέσματος της κλήσης
 * <br>string : <b>message</b> : Το Μήνυμα του αποτελέσματος της κλήσης
 * 
 * 
 * @throws InvalidUnitMMIDType {@see ExceptionMessages::InvalidUnitMMIDType}
 * <br>{@see ExceptionCodes::InvalidUnitMMIDType}
 * 
 * @throws InvalidUnitRegistryNoType {@see ExceptionMessages::InvalidUnitRegistryNoType}
 * <br>{@see ExceptionCodes::InvalidUnitRegistryNoType}
 * 
 * @throws InvalidUnitNameType {@see ExceptionMessages::InvalidUnitNameType}
 * <br>{@see ExceptionCodes::InvalidUnitNameType}
 * 
 * @throws InvalidUnitSpecialNameType {@see ExceptionMessages::InvalidUnitSpecialNameType}
 * <br>{@see ExceptionCodes::InvalidUnitSpecialNameType}
 * 
 * @throws InvalidUnitPhoneNumberType {@see ExceptionMessages::InvalidUnitPhoneNumberType}
 * <br>{@see ExceptionCodes::InvalidUnitPhoneNumberType}
 * 
 * @throws InvalidUnitEmailType {@see ExceptionMessages::InvalidUnitEmailType}
 * <br>{@see ExceptionCodes::InvalidUnitEmailType}
 * 
 * @throws InvalidUnitFaxNumberType {@see ExceptionMessages::InvalidUnitFaxNumberType}
 * <br>{@see ExceptionCodes::InvalidUnitFaxNumberType}
 * 
 * @throws InvalidUnitStreetAddressType {@see ExceptionMessages::InvalidUnitStreetAddressType}
 * <br>{@see ExceptionCodes::InvalidUnitStreetAddressType}
 * 
 * @throws InvalidUnitPostalCodeType {@see ExceptionMessages::InvalidUnitPostalCodeType}
 * <br>{@see ExceptionCodes::InvalidUnitPostalCodeType}
 * 
 * @throws InvalidUnitTaxNumberType {@see ExceptionMessages::InvalidUnitTaxNumberType}
 * <br>{@see ExceptionCodes::InvalidUnitTaxNumberType}
 * 
 * @throws InvalidUnitAreaTeamNumberType {@see ExceptionMessages::InvalidUnitAreaTeamNumberType}
 * <br>{@see ExceptionCodes::InvalidUnitAreaTeamNumberType}
 * 
 * @throws InvalidUnitLevelsCountType {@see ExceptionMessages::InvalidUnitLevelsCountType}
 * <br>{@see ExceptionCodes::InvalidUnitLevelsCountType}
 * 
 * @throws InvalidUnitGroupsCountType {@see ExceptionMessages::InvalidUnitGroupsCountType}
 * <br>{@see ExceptionCodes::InvalidUnitGroupsCountType}
 * 
 * @throws InvalidUnitStudentsCountType {@see ExceptionMessages::InvalidUnitStudentsCountType}
 * <br>{@see ExceptionCodes::InvalidUnitStudentsCountType}
 * 
 * @throws InvalidUnitLatitudeType {@see ExceptionMessages::InvalidUnitLatitudeType}
 * <br>{@see ExceptionCodes::InvalidUnitLatitudeType}
 * 
 * @throws InvalidUnitLongitudeType {@see ExceptionMessages::InvalidUnitLongitudeType}
 * <br>{@see ExceptionCodes::InvalidUnitLongitudeType}
 *  
 * @throws InvalidUnitPositioningType {@see ExceptionMessages::InvalidUnitPositioningType}
 * <br>{@see ExceptionCodes::InvalidUnitPositioningType}
 * 
 * @throws InvalidUnitCreationFekType {@see ExceptionMessages::InvalidUnitCreationFekType}
 * <br>{@see ExceptionCodes::InvalidUnitCreationFekType}
 * 
 * @throws InvalidUnitLastUpdateType {@see ExceptionMessages::InvalidUnitLastUpdateType}
 * <br>{@see ExceptionCodes::InvalidUnitLastUpdateType}
 * 
 * @throws InvalidUnitLastSyncType {@see ExceptionMessages::InvalidUnitLastSyncType}
 * <br>{@see ExceptionCodes::InvalidUnitLastSyncType}
 * 
 * @throws InvalidUnitCommentsType {@see ExceptionMessages::InvalidUnitCommentsType}
 * <br>{@see ExceptionCodes::InvalidUnitCommentsType}
 * 
 * @throws InvalidSourceType {@see ExceptionMessages::InvalidSourceType}
 * <br>{@see ExceptionCodes::InvalidSourceType}
 * 
 * @throws InvalidStateType {@see ExceptionMessages::InvalidStateType}
 * <br>{@see ExceptionCodes::InvalidStateType}
 * 
 * @throws InvalidRegionEduAdminType {@see ExceptionMessages::InvalidRegionEduAdminType}
 * <br>{@see ExceptionCodes::InvalidRegionEduAdminType}
 * 
 * @throws InvalidEduAdminType {@see ExceptionMessages::InvalidEduAdminType}
 * <br>{@see ExceptionCodes::InvalidEduAdminType}
 * 
 * @throws InvalidImplementationEntityType {@see ExceptionMessages::InvalidImplementationEntityType}
 * <br>{@see ExceptionCodes::InvalidImplementationEntityType}
 *
 * @throws InvalidTransferAreaType {@see ExceptionMessages::InvalidTransferAreaType}
 * <br>{@see ExceptionCodes::InvalidTransferAreaType}
 * 
 * @throws InvalidPrefectureType {@see ExceptionMessages::InvalidPrefectureType}
 * <br>{@see ExceptionCodes::InvalidPrefectureType}
 * 
 * @throws InvalidMunicipalityType {@see ExceptionMessages::InvalidMunicipalityType}
 * <br>{@see ExceptionCodes::InvalidMunicipalityType}
 * 
 * @throws InvalidMunicipalityCommunityType {@see ExceptionMessages::InvalidMunicipalityCommunityType}
 * <br>{@see ExceptionCodes::InvalidMunicipalityCommunityType}
 * 
 * @throws InvalidEducationLevelType {@see ExceptionMessages::InvalidEducationLevelType}
 * <br>{@see ExceptionCodes::InvalidEducationLevelType}
 * 
 * @throws InvalidTaxOfficeType {@see ExceptionMessages::InvalidTaxOfficeType}
 * <br>{@see ExceptionCodes::InvalidTaxOfficeType}
 *
 * @throws InvalidCategoryType {@see ExceptionMessages::InvalidCategoryType}
 * <br>{@see ExceptionCodes::InvalidCategoryType}
 * 
 * @throws InvalidUnitTypeType {@see ExceptionMessages::InvalidUnitTypeType}
 * <br>{@see ExceptionCodes::InvalidUnitTypeType}
 * 
 * @throws InvalidOperationShiftType {@see ExceptionMessages::InvalidOperationShiftType}
 * <br>{@see ExceptionCodes::InvalidOperationShiftType}
 * 
 * @throws InvalidLegalCharacterType {@see ExceptionMessages::InvalidLegalCharacterType}
 * <br>{@see ExceptionCodes::InvalidLegalCharacterType}
 * 
 * @throws InvalidOrientationTypeType {@see ExceptionMessages::InvalidOrientationTypeType}
 * <br>{@see ExceptionCodes::InvalidOrientationTypeType}
 * 
 * @throws InvalidSpecialTypeType {@see ExceptionMessages::InvalidSpecialTypeType}
 * <br>{@see ExceptionCodes::InvalidSpecialTypeType}
 *  
 * @throws NoErrors {@see ExceptionMessages::NoErrors}
 * <br>{@see ExceptionCodes::NoErrors}
 * 
 * 
 */

function GetUnits(  $mm_id, $registry_no, $source, $name, $special_name, $state, $region_edu_admin, $edu_admin, $implementation_entity,
                    $transfer_area, $prefecture, $municipality, $municipality_community, $education_level, $phone_number, $email, $fax_number, $street_address, $postal_code,
                    $tax_number, $tax_office, $area_team_number, $category, $unit_type, $operation_shift, $legal_character, $orientation_type,
                    $special_type, $levels_count, $groups_count, $students_count, $latitude, $longitude, $country, $pointsCategory, $inaccessible, $studentsSum, $positioning, $creation_fek, $last_update, $last_sync, $comments,
                    $pagesize, $page, $orderby, $ordertype, $searchtype, $export ) 
{
  
    global $entityManager, $app , $Options;

    $qb = $entityManager->createQueryBuilder();
    $result = array();  

    $result["data"] = array();
    $result["controller"] = __FUNCTION__;
    $result["function"] = substr($app->request()->getPathInfo(),1);
    $result["method"] = $app->request()->getMethod();
    $params = loadParameters();
    
    try {
         
        // Set results parameters===============================================
        $export = Filters::getExportType($export, $params); 
        $page = Pagination::getPage($page, $params);
        $pagesize = (($export == 'XLSX') || ($export == 'CSV') ) ? Parameters::ExportPageSize :Pagination::getPagesize($pagesize, $params) ;   
        $searchtype = Filters::getSearchType($searchtype, $params);
        $ordertype =  Filters::getOrderType($ordertype, $params);
        $orderby = UnitsExt::getOrderBy($params, $orderby);
    
        $qb->select('u');
        $qb->from('Units', 'u');
        
//mm_id=========================================================================
        if (Validator::Exists('mm_id', $params)){
            CRUDUtils::setFilter($qb, $mm_id, "u", "mmId", "mmId", "id", ExceptionMessages::InvalidUnitMMIDType, ExceptionCodes::InvalidUnitMMIDType);
        }
        
//registry_no===================================================================
        if (Validator::Exists('registry_no', $params)){
            CRUDUtils::setFilter($qb, $registry_no, "u", "registryNo", "registryNo", "null,value", ExceptionMessages::InvalidUnitRegistryNoType, ExceptionCodes::InvalidUnitRegistryNoType);
        } 
        
//name==========================================================================
        if (Validator::Exists('name', $params)){
            CRUDUtils::setSearchFilter($qb, $name, "u", "name", $searchtype, ExceptionMessages::InvalidUnitNameType, ExceptionCodes::InvalidUnitNameType);    
        }
        
//special_name==================================================================
        if (Validator::Exists('special_name', $params)){
            CRUDUtils::setSearchFilter($qb, $special_name, "u", "specialName", $searchtype, ExceptionMessages::InvalidUnitSpecialNameType, ExceptionCodes::InvalidUnitSpecialNameType);    
        }
      
//phone_number==================================================================
        if (Validator::Exists('phone_number', $params)){
            CRUDUtils::setSearchFilter($qb, $phone_number, "u", "phoneNumber", $searchtype, ExceptionMessages::InvalidUnitPhoneNumberType, ExceptionCodes::InvalidUnitPhoneNumberType);    
        }
        
//email=========================================================================
        if (Validator::Exists('email', $params)){
            CRUDUtils::setFilter($qb, $email, "u", "email", "email", "null,value", ExceptionMessages::InvalidUnitEmailType, ExceptionCodes::InvalidUnitEmailType);
        }
        
//fax_number====================================================================
        if (Validator::Exists('fax_number', $params)){
            CRUDUtils::setFilter($qb, $fax_number, "u", "faxNumber", "faxNumber", "null,value", ExceptionMessages::InvalidUnitFaxNumberType, ExceptionCodes::InvalidUnitFaxNumberType);
        }

//street_address================================================================
        if (Validator::Exists('street_address', $params)){
            CRUDUtils::setSearchFilter($qb, $street_address, "u", "streetAddress", $searchtype, ExceptionMessages::InvalidUnitStreetAddressType, ExceptionCodes::InvalidUnitStreetAddressType);    
        }

//postal_code===================================================================
        if (Validator::Exists('postal_code', $params)){
            CRUDUtils::setFilter($qb, $postal_code, "u", "postalCode", "postalCode", "null,value", ExceptionMessages::InvalidUnitPostalCodeType, ExceptionCodes::InvalidUnitPostalCodeType);
        }
        
//tax_number====================================================================
        if (Validator::Exists('tax_number', $params)){
            CRUDUtils::setFilter($qb, $tax_number, "u", "taxNumber", "taxNumber", "null,value", ExceptionMessages::InvalidUnitTaxNumberType, ExceptionCodes::InvalidUnitTaxNumberType);
        }
        
//area_team_number==============================================================
        if (Validator::Exists('area_team_number', $params)){
            CRUDUtils::setFilter($qb, $area_team_number, "u", "areaTeamNumber", "areaTeamNumber", "null,value", ExceptionMessages::InvalidUnitAreaTeamNumberType, ExceptionCodes::InvalidUnitAreaTeamNumberType);
        }

//levels_count==============================================================
        if (Validator::Exists('levels_count', $params)){
            CRUDUtils::setFilter($qb, $levels_count, "u", "levelsCount", "levelsCount", "null,value", ExceptionMessages::InvalidUnitLevelsCountType, ExceptionCodes::InvalidUnitLevelsCountType);
        }
        
//groups_count==============================================================
        if (Validator::Exists('groups_count', $params)){
            CRUDUtils::setFilter($qb, $groups_count, "u", "groupsCount", "groupsCount", "null,value", ExceptionMessages::InvalidUnitGroupsCountType, ExceptionCodes::InvalidUnitGroupsCountType);
        }
        
//students_count==============================================================
        if (Validator::Exists('students_count', $params)){
            CRUDUtils::setFilter($qb, $students_count, "u", "studentsCount", "studentsCount", "null,value", ExceptionMessages::InvalidUnitStudentsCountType, ExceptionCodes::InvalidUnitStudentsCountType);
        }
        
//latitude==============================================================
        if (Validator::Exists('latitude', $params)){
            CRUDUtils::setFilter($qb, $latitude, "u", "latitude", "latitude", "null,value", ExceptionMessages::InvalidUnitLatitudeType, ExceptionCodes::InvalidUnitLatitudeType);
        }
        
//longitude==============================================================
        if (Validator::Exists('longitude', $params)){
            CRUDUtils::setFilter($qb, $longitude, "u", "longitude", "longitude", "null,value", ExceptionMessages::InvalidUnitLongitudeType, ExceptionCodes::InvalidUnitLongitudeType);
        }

//country==============================================================
        if (Validator::Exists('country', $params)){
            CRUDUtils::setFilter($qb, $country, "u", "country", "country", "null,value", ExceptionMessages::InvalidUnitCountryType, ExceptionCodes::InvalidUnitCountryType);
        }

//pointsCategory
        if (Validator::Exists('pointsCategory', $params)){
            CRUDUtils::setFilter($qb, $pointsCategory, "u", "pointsCategory", "pointsCategory", "null,value", ExceptionMessages::InvalidUnitPointsCategoryType, ExceptionCodes::InvalidUnitPointsCategoryType);
        }

//inaccessible
        if (Validator::Exists('inaccessible', $params)){
            CRUDUtils::setFilter($qb, $inaccessible, "u", "inaccessible", "inaccessible", "null,value", ExceptionMessages::InvalidUnitInaccessibleType, ExceptionCodes::InvalidUnitInaccessibleType);
        }

//studentsSum
        if (Validator::Exists('studentsSum', $params)){
            CRUDUtils::setFilter($qb, $studentsSum, "u", "studentsSum", "studentsSum", "null,value", ExceptionMessages::InvalidUnitStudentsSumType, ExceptionCodes::InvalidUnitStudentsSumType);
        }

//positioning==============================================================
        if (Validator::Exists('positioning', $params)){
            CRUDUtils::setFilter($qb, $positioning, "u", "positioning", "positioning", "null,value", ExceptionMessages::InvalidUnitPositioningType, ExceptionCodes::InvalidUnitPositioningType);
        }
        
//creation_fek================================================================
   if (Validator::Exists('creation_fek', $params)){
       CRUDUtils::setSearchFilter($qb, $creation_fek, "u", "creationFek", $searchtype, ExceptionMessages::InvalidUnitCreationFekType, ExceptionCodes::InvalidUnitCreationFekType);    
   }
   
//last_update================================================================
   if (Validator::Exists('last_update', $params)){
       CRUDUtils::setSearchFilter($qb, $last_update, "u", "lastUpdate", $searchtype, ExceptionMessages::InvalidUnitLastUpdateType, ExceptionCodes::InvalidUnitLastUpdateType);    
   }
   
//last_sync================================================================
   if (Validator::Exists('last_sync', $params)){
       CRUDUtils::setSearchFilter($qb, $last_sync, "u", "lastSync", $searchtype, ExceptionMessages::InvalidUnitLastSyncType, ExceptionCodes::InvalidUnitLastSyncType);    
   }
             
//comments================================================================
        if (Validator::Exists('comments', $params)){
            CRUDUtils::setSearchFilter($qb, $comments, "u", "comments", $searchtype, ExceptionMessages::InvalidUnitCommentsType, ExceptionCodes::InvalidUnitCommentsType);    
        }

//source========================================================================
        if (Validator::Exists('source', $params)){
//            $qb->leftjoin('u.source', 'sr');
            CRUDUtils::setFilter($qb, $source, "sr", "sourceId", "name", "null,id,value", ExceptionMessages::InvalidSourceType, ExceptionCodes::InvalidSourceType);
        }
        
//state=========================================================================
        if (Validator::Exists('state', $params)){
//            $qb->leftjoin('u.state', 's');
            CRUDUtils::setFilter($qb, $state, "s", "stateId", "name", "null,id,value", ExceptionMessages::InvalidStateType, ExceptionCodes::InvalidStateType);
        }
        
//region_edu_admin==============================================================
        if (Validator::Exists('region_edu_admin', $params)){
//            $qb->leftjoin('u.regionEduAdmin', 'rea');
            CRUDUtils::setFilter($qb, $region_edu_admin, "rea", "regionEduAdminId", "name", "null,id,value", ExceptionMessages::InvalidRegionEduAdminType, ExceptionCodes::InvalidRegionEduAdminType);
        }
        
//edu_admin=====================================================================
        if (Validator::Exists('edu_admin', $params)){
//            $qb->leftjoin('u.eduAdmin', 'ea');
            CRUDUtils::setFilter($qb, $edu_admin, "ea", "eduAdminId", "name", "null,id,value", ExceptionMessages::InvalidEduAdminType, ExceptionCodes::InvalidEduAdminType);
        }
        
//implementation_entity=========================================================
        if (Validator::Exists('implementation_entity', $params)){
//            $qb->leftjoin('u.implementationEntity', 'ie');
            CRUDUtils::setFilter($qb, $implementation_entity, "ie", "implementationEntityId", "name", "null,id,value", ExceptionMessages::InvalidImplementationEntityType, ExceptionCodes::InvalidImplementationEntityType);
        }
        
//transfer_area=================================================================
        if (Validator::Exists('transfer_area', $params)){
//            $qb->leftjoin('u.transferArea', 'ta');
            CRUDUtils::setFilter($qb, $transfer_area, "ta", "transferAreaId", "name", "null,id,value", ExceptionMessages::InvalidTransferAreaType, ExceptionCodes::InvalidTransferAreaType);
        }
        
//prefecture====================================================================
        if (Validator::Exists('prefecture', $params)){
//            $qb->leftjoin('u.prefecture', 'p');
            CRUDUtils::setFilter($qb, $prefecture, "p", "prefectureId", "name", "null,id,value", ExceptionMessages::InvalidPrefectureType, ExceptionCodes::InvalidPrefectureType);
        }
        
//municipality==================================================================
        if (Validator::Exists('municipality', $params)){
//            $qb->leftjoin('u.municipality', 'm');
            CRUDUtils::setFilter($qb, $municipality, "m", "municipalityId", "name", "null,id,value", ExceptionMessages::InvalidMunicipalityType, ExceptionCodes::InvalidMunicipalityType);
        }
        
//municipality_community========================================================
        if (Validator::Exists('municipality_community', $params)){
//            $qb->leftjoin('u.municipalityCommunity', 'mc');
            CRUDUtils::setFilter($qb, $municipality_community, "mc", "municipalityCommunityId", "name", "null,id,value", ExceptionMessages::InvalidMunicipalityCommunityType, ExceptionCodes::InvalidMunicipalityCommunityType);
        }
      
//education_level===============================================================
        if (Validator::Exists('education_level', $params)){
//            $qb->leftjoin('u.educationLevel', 'el');
            CRUDUtils::setFilter($qb, $education_level, "el", "educationLevelId", "name", "null,id,value", ExceptionMessages::InvalidEducationLevelType, ExceptionCodes::InvalidEducationLevelType);
        }
        
//tax_office====================================================================
        if (Validator::Exists('tax_office', $params)){
//            $qb->leftjoin('u.taxOffice', 'to');
            CRUDUtils::setFilter($qb, $tax_office, "to", "taxOfficeId", "name", "null,id,value", ExceptionMessages::InvalidTaxOfficeType, ExceptionCodes::InvalidTaxOfficeType);
        }
          
 //category=====================================================================
        if (Validator::Exists('category', $params)){
//            $qb->leftjoin('u.category', 'c');
            CRUDUtils::setFilter($qb, $category, "c", "categoryId", "name", "null,id,value", ExceptionMessages::InvalidCategoryType, ExceptionCodes::InvalidCategoryType);
        }
        
 //unit_type====================================================================
        if (Validator::Exists('unit_type', $params)){
//            $qb->leftjoin('u.unitType', 'ut');
            CRUDUtils::setFilter($qb, $unit_type, "ut", "unitTypeId", "name", "null,id,value", ExceptionMessages::InvalidUnitTypeType, ExceptionCodes::InvalidUnitTypeType);
        }

 //operation_shift==============================================================
        if (Validator::Exists('operation_shift', $params)){
//            $qb->leftjoin('u.operationShift', 'os');
            CRUDUtils::setFilter($qb, $operation_shift, "os", "operationShiftId", "name", "null,id,value", ExceptionMessages::InvalidOperationShiftType, ExceptionCodes::InvalidOperationShiftType);
        }
        
 //legal_character==============================================================
        if (Validator::Exists('legal_character', $params)){
//            $qb->leftjoin('u.legalCharacter', 'lc');
            CRUDUtils::setFilter($qb, $legal_character, "lc", "legalCharacterId", "name", "null,id,value", ExceptionMessages::InvalidLegalCharacterType, ExceptionCodes::InvalidLegalCharacterType);
        } 
        
 //orientation_type=============================================================
        if (Validator::Exists('orientation_type', $params)){
//            $qb->leftjoin('u.orientationType', 'ot');
            CRUDUtils::setFilter($qb, $orientation_type, "ot", "orientationTypeId", "name", "null,id,value", ExceptionMessages::InvalidOrientationTypeType, ExceptionCodes::InvalidOrientationTypeType);
        }
        
 //special_type=================================================================
        if (Validator::Exists('special_type', $params)){
//            $qb->leftjoin('u.specialType', 'st');
            CRUDUtils::setFilter($qb, $special_type, "st", "specialTypeId", "name", "null,id,value", ExceptionMessages::InvalidSpecialTypeType, ExceptionCodes::InvalidSpecialTypeType);
        }
        
//joins=========================================================================
        
            $qb->leftjoin('u.source', 'sr');
            $qb->leftjoin('u.state', 's');
            $qb->leftjoin('u.regionEduAdmin', 'rea');
            $qb->leftjoin('u.eduAdmin', 'ea');
            $qb->leftjoin('u.implementationEntity', 'ie');
            $qb->leftjoin('u.transferArea', 'ta');
            $qb->leftjoin('u.prefecture', 'p');
            $qb->leftjoin('u.municipality', 'm');
            $qb->leftjoin('u.municipalityCommunity', 'mc');
            $qb->leftjoin('u.educationLevel', 'el');
            $qb->leftjoin('u.taxOffice', 'to');
            $qb->leftjoin('u.category', 'c');
            $qb->leftjoin('u.unitType', 'ut');
            $qb->leftjoin('u.operationShift', 'os');
            $qb->leftjoin('u.legalCharacter', 'lc');
            $qb->leftjoin('u.orientationType', 'ot');
            $qb->leftjoin('u.specialType', 'st');
            
//            $qb->leftjoin('u.hostRelations', 'hr');
//            $qb->leftjoin('hr.relationType', 'rt');
//            $qb->leftjoin('u.unitDns', 'ud');
//            $qb->leftjoin('u.levels', 'l');
//            $qb->leftjoin('l.groups', 'g');
//            $qb->leftjoin('u.unitWorkers', 'uw');
//            $qb->leftjoin('uw.worker', 'w');
//            $qb->leftjoin('uw.workerPosition', 'wp');
//            $qb->leftjoin('w.workerSpecialization', 'ws');
//            $qb->leftjoin('w.source', 's');

//pagination and results========================================================
        $qb->orderBy(array_search($orderby, UnitsExt::getColumns() ), $ordertype);
        //        echo  $qb->getQuery()->getSQL();;
        //        die();
        
        $results = new Doctrine\ORM\Tools\Pagination\Paginator($qb->getQuery());
        $result["total"] = count($results);
        $results->getQuery()->setFirstResult($pagesize * ($page-1));
        $pagesize!==Parameters::AllPageSize ? $results->getQuery()->setMaxResults($pagesize) : null;
        
        //UNITS results=========================================================
        $count = 0;
        foreach ($results->getQuery()->getResult() as $unit)
        {
            
            $data = array(
                            "mm_id"                 => (int)$unit->getMmId(),
                            "registry_no"           => $unit->getRegistryNo(),
                            "name"                  => $unit->getName(),
                            "special_name"          => $unit->getSpecialName(),
                            "source_id"                 => Validator::IsNull($unit->getSource()) ? Validator::ToNull() : $unit->getSource()->getSourceId(),
                            "source"                    => Validator::IsNull($unit->getSource()) ? Validator::ToNull() : $unit->getSource()->getName(),
                            "category_id"               => Validator::IsNull($unit->getCategory()) ? Validator::ToNull() : $unit->getCategory()->getCategoryId(),
                            "category"                  => Validator::IsNull($unit->getCategory()) ? Validator::ToNull() : $unit->getCategory()->getName(),
                            "state_id"                  => Validator::IsNull($unit->getState()) ? Validator::ToNull() : $unit->getState()->getStateId(),
                            "state"                     => Validator::IsNull($unit->getState()) ? Validator::ToNull() : $unit->getState()->getName(),
                            //"area_team_number"      => $unit->getAreaTeamNumber(),
                            "street_address"        => Validator::IsTrue($params['uppercase']) ? Validator::ToUpperWithoutAccents($unit->getStreetAddress()) : $unit->getStreetAddress(), //$unit->getStreetAddress(),
                            "postal_code"           => $unit->getPostalCode(),
                            "fax_number"            => $unit->getFaxNumber(),
                            "phone_number"          => $unit->getPhoneNumber(),
                            "email"                 => $unit->getEmail(),
                            //"students_count"        => $unit->getStudentsCount(),
                            //"groups_count"          => $unit->getGroupsCount(),
                            //"levels_count"          => $unit->getLevelsCount(),
                            "tax_number"            => $unit->getTaxNumber(),
                            "region_edu_admin_id"       => Validator::IsNull($unit->getRegionEduAdmin()) ? Validator::ToNull() : $unit->getRegionEduAdmin()->getRegionEduAdminId(),
                            "region_edu_admin"          => Validator::IsNull($unit->getRegionEduAdmin()) ? Validator::ToNull() : $unit->getRegionEduAdmin()->getName(),
                            "edu_admin_id"              => Validator::IsNull($unit->getEduAdmin()) ? Validator::ToNull() : $unit->getEduAdmin()->getEduAdminId(),
                            "edu_admin"                 => Validator::IsNull($unit->getEduAdmin()) ? Validator::ToNull() : $unit->getEduAdmin()->getName(),
                            "transfer_area_id"         => Validator::IsNull($unit->getTransferArea()) ? Validator::ToNull() : $unit->getTransferArea()->getTransferAreaId(),
                            "transfer_area"            => Validator::IsNull($unit->getTransferArea()) ? Validator::ToNull() : $unit->getTransferArea()->getName(),
                            "prefecture_id"            => Validator::IsNull($unit->getPrefecture()) ? Validator::ToNull() : $unit->getPrefecture()->getPrefectureId(),
                            "prefecture"               => Validator::IsNull($unit->getPrefecture()) ? Validator::ToNull() : $unit->getPrefecture()->getName(),
                            "municipality_id"          => Validator::IsNull($unit->getMunicipality()) ? Validator::ToNull() : $unit->getMunicipality()->getMunicipalityId(),
                            "municipality"             => Validator::IsNull($unit->getMunicipality()) ? Validator::ToNull() : $unit->getMunicipality()->getName(),
                            "municipality_community_id"          => Validator::IsNull($unit->getMunicipalityCommunity()) ? Validator::ToNull() : $unit->getMunicipalityCommunity()->getMunicipalityCommunityId(),
                            "municipality_community"             => Validator::IsNull($unit->getMunicipalityCommunity()) ? Validator::ToNull() : $unit->getMunicipalityCommunity()->getName(),
                            "education_level_id"       => Validator::IsNull($unit->getEducationLevel()) ? Validator::ToNull() : $unit->getEducationLevel()->getEducationLevelId(),
                            "education_level"          => Validator::IsNull($unit->getEducationLevel()) ? Validator::ToNull() : $unit->getEducationLevel()->getName(),
                            "unit_type_id"             => Validator::IsNull($unit->getUnitType()) ? Validator::ToNull() : $unit->getUnitType()->getUnitTypeId(),
                            "unit_type"                => Validator::IsNull($unit->getUnitType()) ? Validator::ToNull() : $unit->getUnitType()->getName(),
                            "orientation_type_id"      => Validator::IsNull($unit->getOrientationType()) ? Validator::ToNull() : $unit->getOrientationType()->getOrientationTypeId(),
                            "orientation_type"         => Validator::IsNull($unit->getOrientationType()) ? Validator::ToNull() : $unit->getOrientationType()->getName(),
                            "operation_shift_id"       => Validator::IsNull($unit->getOperationShift()) ? Validator::ToNull() : $unit->getOperationShift()->getOperationShiftId(),
                            "operation_shift"          => Validator::IsNull($unit->getOperationShift()) ? Validator::ToNull() : $unit->getOperationShift()->getName(),
                            "legal_character_id"       => Validator::IsNull($unit->getLegalCharacter()) ? Validator::ToNull() : $unit->getLegalCharacter()->getLegalCharacterId(),
                            "legal_character"          => Validator::IsNull($unit->getLegalCharacter()) ? Validator::ToNull() : $unit->getLegalCharacter()->getName(),
                            "implementation_entity_id" => Validator::IsNull($unit->getImplementationEntity()) ? Validator::ToNull() : $unit->getImplementationEntity()->getImplementationEntityId(),
                            "implementation_entity"    => Validator::IsNull($unit->getImplementationEntity()) ? Validator::ToNull() : $unit->getImplementationEntity()->getName(),
                            "implementation_entity_initials" => Validator::IsNull($unit->getImplementationEntity()) ? Validator::ToNull() : $unit->getImplementationEntity()->getInitials(),
                            "tax_office_id"            => Validator::IsNull($unit->getTaxOffice()) ? Validator::ToNull() : $unit->getTaxOffice()->getTaxOfficeId(),
                            "tax_office"               => Validator::IsNull($unit->getTaxOffice()) ? Validator::ToNull() : $unit->getTaxOffice()->getName(),
                            "special_type_id"          => Validator::IsNull($unit->getSpecialType()) ? Validator::ToNull() : $unit->getSpecialType()->getSpecialTypeId(),
                            "special_type"             => Validator::IsNull($unit->getSpecialType()) ? Validator::ToNull() : $unit->getSpecialType()->getName(),
                            "latitude"          => $unit->getLatitude(),
                            "longitude"         => $unit->getLongitude(),
                            "country"           => $unit->getCountry(),
                            "pointsCategory"    => $unit->getPointsCategory(),
                            "inaccessible"      => $unit->getInaccessible(),
                            "studentsSum"       => $unit->getStudentsSum(),
                            "positioning"       => $unit->getPositioning(),
                            "creation_fek"      => $unit->getCreationFek(),
                            "last_sync"         => ($unit->getLastSync() instanceof \DateTime)? $unit->getLastSync()->format('Y-m-d H:i:s') : null,
                            "last_update"       => ($unit->getLastUpdate() instanceof \DateTime)? $unit->getLastUpdate()->format('Y-m-d H:i:s') : null,
                            "comments"          => $unit->getComments(),
                            "version"           => $unit->getVersion(),
                            "api_status"        => 'public'
                        );
            
            if($app->request->userRoles != 'GUEST') {
                $data["api_status"] = 'private';
                //LEVELS results================================================
//                $data["levels"] = array();
//                foreach ($unit->getLevels() as $level) {
//                    $levels = array(    "level_id"       => $level->getLevelId(),
//                                        "name"           => $level->getName(),
//                                        "groups_count"   => $level->getGroupsCount(),
//                                        "students_count" => $level->getStudentsCount()
//                                    );
//
//                    //LEVELS-GROUPS results=====================================
//                    $levels["groups"] = array();
//                    foreach ($level->getGroups() as $group) {
//                        $levels["groups"][] = array(
//                                                        "group_id"       => $group->getGroupId(),
//                                                        "name"           => $group->getName(),
//                                                        "students_count" => $group->getStudentsCount()
//                                                    );
//
//                    }    
//
//                $data["levels"][] = $levels;
//                }

                //HOST_RELATIONS results========================================
                $data["host_relations"] = array();
                foreach ($unit->getHostRelations() as $host_relation) {
                    $data["host_relations"][] = array(  "relation_id"        => $host_relation->getRelationId(),
                                                        "guest_mm_id"        => Validator::IsNull($host_relation->getGuestMm()) ? Validator::ToNull() : $host_relation->getGuestMm()->getMmId(),
                                                        "guest_registry_no"  => Validator::IsNull($host_relation->getGuestMm()) ? Validator::ToNull() : $host_relation->getGuestMm()->getRegistryNo(),
                                                        "guest_name"         => Validator::IsNull($host_relation->getGuestMm()) ? Validator::ToNull() : $host_relation->getGuestMm()->getName(),
                                                        "guest_special_name" => Validator::IsNull($host_relation->getGuestMm()) ? Validator::ToNull() : $host_relation->getGuestMm()->getSpecialName(),
                                                        "relation_state"     => $host_relation->getRelationState(),
                                                        "true_date"          => $host_relation->getTrueDate(),
                                                        "true_fek"           => $host_relation->getTrueFek(),
                                                        "false_date"         => $host_relation->getFalseDate(),
                                                        "false_fek"          => $host_relation->getFalseFek(),
                                                        "relation_type_id"   => Validator::IsNull($host_relation->getRelationType()) ? Validator::ToNull() : $host_relation->getRelationType()->getRelationTypeId(),
                                                        "relation_type"      => Validator::IsNull($host_relation->getRelationType()) ? Validator::ToNull() : $host_relation->getRelationType()->getName()
                                                    );
                }

                //GUEST_RELATIONS results=======================================
                $data["guest_relations"] = array();
                foreach ($unit->getGuestRelations() as $guest_relation) {
                    $data["guest_relations"][] = array( "relation_id"        => $guest_relation->getRelationId(),
                                                        "host_mm_id"         => Validator::IsNull($guest_relation->getHostMm()) ? Validator::ToNull() : $guest_relation->getHostMm()->getMmId(),
                                                        "host_registry_no"   => Validator::IsNull($guest_relation->getHostMm()) ? Validator::ToNull() : $guest_relation->getHostMm()->getRegistryNo(),
                                                        "host_name"          => Validator::IsNull($guest_relation->getHostMm()) ? Validator::ToNull() : $guest_relation->getHostMm()->getName(),
                                                        "host_special_name"  => Validator::IsNull($guest_relation->getHostMm()) ? Validator::ToNull() : $guest_relation->getHostMm()->getSpecialName(),
                                                        "relation_state"     => $guest_relation->getRelationState(),
                                                        "true_date"          => $guest_relation->getTrueDate(),
                                                        "true_fek"           => $guest_relation->getTrueFek(),
                                                        "false_date"         => $guest_relation->getFalseDate(),
                                                        "false_fek"          => $guest_relation->getFalseFek(),
                                                        "relation_type_id"   => Validator::IsNull($guest_relation->getRelationType()) ? Validator::ToNull() : $guest_relation->getRelationType()->getRelationTypeId(),
                                                        "relation_type"      => Validator::IsNull($guest_relation->getRelationType()) ? Validator::ToNull() : $guest_relation->getRelationType()->getName()
                                                    );
                }

                //UNIT_WORKERS results==========================================
                $data["workers"] = array();
                foreach ($unit->getUnitWorkers() as $unit_worker) {
                    $data["workers"][] = array( "unit_worker_id"   => $unit_worker->getUnitWorkerId(),
                                                "worker_id"        => Validator::IsNull($unit_worker->getWorker()) ? Validator::ToNull() : $unit_worker->getWorker()->getWorkerId(),
                                                "registry_no"      => Validator::IsNull($unit_worker->getWorker()) ? Validator::ToNull() : $unit_worker->getWorker()->getRegistryNo(),
                                                "tax_number"               => Validator::IsNull($unit_worker->getWorker()) ? Validator::ToNull() : $unit_worker->getWorker()->getTaxNumber(),
                                                "lastname"                 => Validator::IsNull($unit_worker->getWorker()) ? Validator::ToNull() : $unit_worker->getWorker()->getLastname(),
                                                "firstname"                => Validator::IsNull($unit_worker->getWorker()) ? Validator::ToNull() : $unit_worker->getWorker()->getFirstname(),
                                                "fathername"               => Validator::IsNull($unit_worker->getWorker()) ? Validator::ToNull() : $unit_worker->getWorker()->getFathername(),
                                                "fullname"                 => Validator::IsNull($unit_worker->getWorker()) ? Validator::ToNull() : $unit_worker->getWorker()->getLastname().' '.$unit_worker->getWorker()->getFirstname(),
                                                "sex"                      => Validator::IsNull($unit_worker->getWorker()) ? Validator::ToNull() : $unit_worker->getWorker()->getSex(),
                                                "worker_specialization_id" => Validator::IsNull($unit_worker->getWorker()->getWorkerSpecialization()) ? Validator::ToNull() : $unit_worker->getWorker()->getWorkerSpecialization()->getWorkerSpecializationId(),
                                                "worker_specialization"    => Validator::IsNull($unit_worker->getWorker()->getWorkerSpecialization()) ? Validator::ToNull() : $unit_worker->getWorker()->getWorkerSpecialization()->getName(),
                                                "worker_position_id"       => Validator::IsNull($unit_worker->getWorkerPosition()) ? Validator::ToNull() : $unit_worker->getWorkerPosition()->getWorkerPositionId(),
                                                "worker_position"          => Validator::IsNull($unit_worker->getWorkerPosition()) ? Validator::ToNull() : $unit_worker->getWorkerPosition()->getName(),
                                                "worker_source_id"         => Validator::IsNull($unit_worker->getWorker()->getSource()) ? Validator::ToNull() : $unit_worker->getWorker()->getSource()->getSourceId(),
                                                "worker_source"            => Validator::IsNull($unit_worker->getWorker()->getSource()) ? Validator::ToNull() : $unit_worker->getWorker()->getSource()->getName()
                                               );
                }
                
                //UNIT_DNS results==============================================
                $data["unit_dns"] = array();
                foreach ($unit->getUnitDns() as $unit_dns) {
                    $data["unit_dns"][] = array(  "unit_dns_id"     => $unit_dns->getUnitDnsId(),
                                                  "unit_dns"        => $unit_dns->getUnitDns(),
                                                  "unit_ext_dns"    => $unit_dns->getUnitExtDns()
                                                );
                }
                
            }
            
            //==================================================================
            $count++;
            $result["data"][] = $data;
        }
        $result["count"] = $count;
        
//pagination results============================================================     
        $maxPage = Pagination::getMaxPage($result["total"],$page,$pagesize);
        $pagination = array( "page" => $page,   
                             "maxPage" => $maxPage, 
                             "pagesize" => $pagesize 
                            );    
        $result["pagination"]=$pagination;
        
//result_messages===============================================================      
        $result["status"] = ExceptionCodes::NoErrors;
        $result["message"] = "[".$result["method"]."][".$result["function"]."]:".ExceptionMessages::NoErrors;
    } catch (Exception $e) {
        $result["status"] = $e->getCode();
        $result["message"] = "[".$result["method"]."][".$result["function"]."]:".$e->getMessage();
    } 
    
//debug=========================================================================
   if ( Validator::IsTrue( $params["debug"]  ) )
   {
        $result["DQL"] =  trim(preg_replace('/\s\s+/', ' ', $qb->getDQL()));
//        $result["SQL"] =  trim(preg_replace('/\s\s+/', ' ', $qb->getQuery()->getSQL()));
//        $result["SQL_PAGINATION"] =  trim(preg_replace('/\s\s+/', ' ', $results->getQuery()->getSQL()));
   }
      
   return UnitsExt::exportResults($export, $result);
    
}

?>
